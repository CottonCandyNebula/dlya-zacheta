#include <iostream>
#include <cmath>


using namespace std;

class point{ // точки
    private: 
    double x,y;
    public:
    point(){
        x=0;
        y=0;
    }
    point(double nx,double ny){
        //перегрузка конструктора
        x=nx;
        y=ny;
    }
    double getX(){
        return x;
    }
    double getY(){
        return y;
    }
    void setX(double nx){
        x=nx;
    }
    void setY(double ny){
        y=ny;
    }
    void printPoint(){
        cout<<"("<<x<<","<<y<<")"<<endl;    
    }
};

class segment{ //отрезки
    private:
    point *P1,*P2;//динамическое использвоние одного класса в другом
    public:
    segment(){
        P1 = new point;
        P2 = new point;
    }
    segment(double x1,double y1,double x2,double y2){
        P1 = new point(x1,y1);
        P2 = new point(x2,y2);
    }
    ~segment(){//деструктов. обязательно разрушение используемых динамических объектов
        delete P1;
        delete P2;
    }   
    
    double length(){
        return sqrt(pow(P1->getX()-P2->getX(),2)+pow(P1->getY()-P2->getY(),2));
    }
    point * getFirstPoint(){//результаттом функции является указатель на объект типа point
        point *tmp = new point(P1->getX(),P1->getY());
        return tmp;
    }
    point * getSecondPoint(){
        point *tmp = new point(P2->getX(),P2->getY());
        return tmp;
    }   
    
    // void print(){//печать координат начала и конца отрезка
        
    // }
    
    point * getMeedle(){//реализовать метод получения точки, которая является серединой отрезка
        point *tmp = new point((P1->getX()+P2->getX())/2, (P1->getY()+P2->getY())/2);
        return tmp;
    }
    
    bool pointOnLine(point *P){//возвращает true если точка P лежит на прямой, на которой лежит отрезок
        return (P->getX() - P1->getX()) * (P2->getY() - P1->getY()) - (P2->getX() - P1->getX()) * (P->getY() - P1->getY()) == 0;
    }
    
    bool pointBelongs(point *P){//возвращает true если точка P принадлежит отрезку
        return (P->getX()-P1->getX())*(P2->getY()-P1->getY())-(P2->getX()-P1->getX())*(P->getY()-P1->getY())==0 && 
        (min(P1->getX(), P2->getX()) <= P->getX() && P->getX() <= max(P1->getX(), P2->getX())) &&
        (min(P1->getY(), P2->getY()) <= P->getY() && P->getY() <= max(P1->getY(), P2->getY()));
    }

    
};
/*
Задание 1. Реализовать следующие функции
*/
bool isPerpendicular(segment *A, segment *B ){//возвращает true если отрезки лежат на перпендикулярнах прямых 
    return (A->getFirstPoint()->getX()-A->getSecondPoint()->getX())*(B->getFirstPoint()->getX()-B->getSecondPoint()->getX()) +
    (A->getFirstPoint()->getY()-A->getSecondPoint()->getY())*(B->getFirstPoint()->getY()-B->getSecondPoint()->getY())==0;
}

bool isPapallel(segment *A, segment *B ){//возвращает true если отрезки лежат на параллельных прямых прямых
    return (A->getFirstPoint()->getX()-A->getSecondPoint()->getX())/(B->getFirstPoint()->getX()-B->getSecondPoint()->getX()) ==
    (A->getFirstPoint()->getY()-A->getSecondPoint()->getY())/(B->getFirstPoint()->getY()-B->getSecondPoint()->getY());
}

bool isCros(segment *A, segment *B ){//возвращает true если отрезки пересекаются
    return (A->getFirstPoint()->getX()*B->getFirstPoint()->getY() - A->getFirstPoint()->getY()*B->getFirstPoint()->getX()) *
    (A->getFirstPoint()->getX()*B->getSecondPoint()->getY() - A->getFirstPoint()->getY()*B->getSecondPoint()->getX())<0 &&
    (A->getSecondPoint()->getX()*B->getFirstPoint()->getY() - A->getSecondPoint()->getY()*B->getFirstPoint()->getX()) *
    (A->getSecondPoint()->getX()*B->getSecondPoint()->getY() - A->getSecondPoint()->getY()*B->getSecondPoint()->getX())<0;
}

point * getCrosPoint(segment *A, segment *B ){//возвращает указатель на объект с координатами точки пересечения
    double x1 = A->getFirstPoint()->getX();
    double y1 = A->getFirstPoint()->getY();
    double x2 = A->getSecondPoint()->getX();
    double y2 = A->getSecondPoint()->getY();
    double x3 = B->getFirstPoint()->getX();
    double y3 = B->getFirstPoint()->getY();
    double x4 = B->getSecondPoint()->getX();
    double y4 = B->getSecondPoint()->getY();
    
    double n;
    if (y2 - y1 != 0) {  // a(y)
        double q = (x2 - x1) / (y1 - y2);   
        double sn = (x3 - x4) + (y3 - y4) * q; if (!sn) { return 0; }  // c(x) + c(y)*q
        double fn = (x3 - x1) + (y3 - y1) * q;   // b(x) + b(y)*q
        n = fn / sn;
    }
    else {
        if (!(y3 - y4)) { return 0; }  
        n = (y3 - y1) / (y3 - y4);   
    }
    double x = x3 + (x4 - x3) * n;  
    double y = y3 + (y4 - y3) * n; 
    point *tmp = new point(x,y);
    return tmp;
}

//Задание 2
//реализовать динамический массив Точек (статический с частичным использванием -10 к карме программиста) В INT MAIN

//реализовать ввод и вывод массива точек
void print(point *AllPoints, int *l){
    cout << "Все точки массива:" << endl;
    for (int i = 0; i < *l; i++){
        AllPoints[i].printPoint();
    }
}
// реализовать функцию которая принимает указанный массив точек и возвращает длину соответствующей незамкнутой кривой
double length_Of_The_Segment(point *AllPoints, int l){
    double sum = 0;
    segment *nSegmet;
    for (int i = 0; i<(l-1); i++) {
        double x1 = AllPoints[i].getX();
        double y1 = AllPoints[i].getY();
        double x2 = AllPoints[i+1].getX();
        double y2 = AllPoints[i+1].getY();
        nSegmet = new segment(x1, y1, x2, y2);
        sum += nSegmet->length();
        delete nSegmet;
    }
    return sum;
}


// крайняя точка

point *lastPoint(point *AllPoints, int l){
    point *last = AllPoints+l-2;
    return last;
}

// реализовать функцию которая принимает указанный массив точек и возвращает длину соответствующей замкнутой кривой
double length_Of_The_Figure(point *AllPoints, int l){
    double sum = 0;
    point *lastPoint = AllPoints+l-1;
    segment *lastSegment = new segment(AllPoints[0].getX(), AllPoints[0].getY(), lastPoint->getX(), lastPoint->getY());
    return length_Of_The_Segment(AllPoints, l) + lastSegment->length();
}
// реализовать функцию которая принимает указанный массив точек и возвращает площадь соответствующей замкнутой кривой
// реализовать функцию которая принимает указанный массив точек и возвращает true если соответствующая замкнута кривая является выпуклой



int main()
{
    // 
    //point P; // создана точка (0,0)
    //P.printPoint(); 
    //point P2(4,6);
    //P2.printPoint(); 
    //segment *AB = new segment(2,2,5,5); // длина отрезка по заданным координатам
    //cout << AB->length(); // длина отрезка
    
    //point *AB1 = AB->getFirstPoint(); 
    //cout << endl;
    //AB1->printPoint(); 
    
    // point *AB2 = AB->getMeedle(); // нахождение середины отрезка
    // AB2->printPoint();
    
    // point *P3 = new point(7,6); // принадлежность точки прямой
    // bool B = AB->pointOnLine(P3);
    // cout << B << endl;
    
    // point *P4 = new point(5,5); // принадлежность точки отрезку
    // bool B2 = AB->pointBelongs(P4);
    // cout << B2 << endl;
    
    // segment *A = new segment(8,6,6,3); // перпендикулярность отрезков
    // segment *B = new segment(8,6,2,10);
    // bool G = isPerpendicular(A,B);
    // cout << G << endl;
    
    // segment *C = new segment(1,9,3,10); // параллельность отрезков
    // segment *D = new segment(4,9,2,8);
    // bool G2 = isPapallel(C,D);
    // cout << G2 << endl;
    
    // segment *E = new segment(0,0,1,1); // пересечение отрезков (0 или 1)
    // segment *F = new segment(0,1,1,0);
    // bool G3 = isCros(E,F);
    // cout << G3 << endl;
    
    // point *PCros = getCrosPoint(E,F); // точка пересечения отрезков
    // PCros->printPoint();
    
    // Создание массива 
    
    int len = 3;
    int *l = &len;
    point a(0, 0);
    point b(0, 1);
    point c(1, 1);
    point *AllPoints = new point[len];
    AllPoints[0] = a;
    AllPoints[1] = b;
    AllPoints[2] = c;
    cout << endl;
    
    // вывод массива точек:
    print(AllPoints, l);
    
    //длина массива:
    cout << "Длина массива точек: " << length_Of_The_Segment(AllPoints, len) << endl;
    
    // длина замкнутой кривой
    cout << "Длина замкнутой кривой: " << length_Of_The_Figure(AllPoints, len) << endl;
    
    
    return 0;
}
