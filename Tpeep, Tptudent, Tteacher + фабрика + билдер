#include <iostream>

using namespace std;

class mString {
    private:
    char *st;
    public:
    mString(){
        st = NULL;
    }
    
    void test(){
        st = new char(10);
        char c = 'a';
        for (int i=0; i<10; i++) st[i] = c++;
        st[9]='\0';
        cout << st;
    }
    
    ~mString(){
        if (st) delete st;
    }

    void operator = (const mString &s);
    void operator = (const char *c);
    
    mString operator + (const mString &s) const; // + относиться к элементу левее, то есть mString &s, к элементу класса, потом уже добавляется второй элементр
    mString operator + (const char *s) const;
    
    friend bool operator==(const mString &s1, const mString &s2);   /* ==, >, >= не работают с классом, только имеют доступ к привату через friend,
                                                                    передаются оба значения */
    friend bool operator!=(const mString &s1, const mString &s2);
    
    friend bool operator>(const mString &s1, const mString &s2);
    friend bool operator>=(const mString &s1, const mString &s2);
    
    friend istream& operator >> (istream &in, mString &s);
    friend ostream& operator << (ostream &out, const mString &s);
    
    mString substr (int start, int count);
    int find (const mString &s);
};

ostream& operator<< (ostream &out, const mString &s){
    out << s.st <<endl;
    return out;
}

istream& operator>> (istream &in, mString &s){
    char buf[10000], t;
    int i, k=0;
    t=in.get();
    while ((int)(t)!=10){
        buf[k++]=t;
        t=in.get();
    }
    if (s.st) delete s.st;
    s.st = new char[k+1];
    for (i=0; i<k; i++) s.st[i]=buf[i];
    s.st[i]='\0';
    return in;
}

void mString::operator= (const mString &s){
    if (st) delete st;
    int i, k=0;
    while (s.st[k++]);
    st = new char[k];
    for (i=0; i<k; i++) st[i]=s.st[i];
}

void mString::operator= (const char *c){
    if (st) delete st;
    int i, k=0;
    while (c[k++]);
    st = new char[k];
    for (i=0; i<k; i++) st[i]=c[i];
    //st[i]="\0";
}

bool operator == (const mString &a, const mString &b){
    int i, j, k=0, l=0;
    
    while (a.st[k++]);
    k--;
    while (b.st[l++]);
    l--;
    if (k!=l) return 0;
    
    for (i=0; i<k; i++) if (a.st[i]!=b.st[i]) return 0;
    
    return 1;
}

bool operator != (const mString &a, const mString &b){
    return !(a==b);
}


bool operator>(const mString &s1, const mString &s2){ // сравнение больше ли
    int i;
    int k, k1, k2 = 0;
    while (s1.st[k1++]);
    k1--;
    while (s2.st[k2++]);
    k2--;
    int l = k1;
    if (k2<l) l=k2;
    
    for (i=0; i<=l;i++){
        if (s1.st[i]>s2.st[i]) return 1;
        if (s1.st[i]<s2.st[i]) return 0;
    }
    return 0;
}

bool operator>=(const mString &s1, const mString &s2){ // сравнение больше или равно
    int i;
    int k, k1, k2 = 0;
    while (s1.st[k1++]);
    k1--;
    while (s2.st[k2++]);
    k2--;
    int l = k1; 
    if (k2<l) l=k2; //принимает минимальное значение из двух
    
    for (i=0; i<l;i++){
        if (s1.st[i]>=s2.st[i]) return 1;
        if (s1.st[i]<s2.st[i]) return 0;
    }
    return 0;
}


mString mString::operator+ (const mString &b) const{ // строка и строка
    int i, j, k=0, l=0;
    mString ou;
    
    while (st[k++]);
    k--;
    while (b.st[l++]);
    l--;
    if (ou.st) delete ou.st;
    
    ou.st = new char[k+l];
    for (i=0; i<k; i++) ou.st[i]=st[i];
    for (j=k; j<k+l; j++) ou.st[j]=b.st[j-k];
    ou.st[j]='\0';
    
    return ou;
}

mString mString::operator + (const char *s) const{ // строка и константа 
    int i, j, k=0, l=0;
    mString ou;
    
    while (st[k++]);
    k--;
    while (s[l++]);
    l--;
    if (ou.st) delete ou.st;
    
    ou.st = new char[k+l];
    for (i=0; i<k; i++) ou.st[i]=st[i];
    for (j=k; j<k+l; j++) ou.st[j]=s[j-k];
    ou.st[j]='\0';
    
    return ou;
}

mString mString::substr (int start, int count){
    mString ou;
    int k=start;
    ou.st = new char[count+1];
    for (int i=0; i<count; i++,k++) ou.st[i]=st[k];
    ou.st[count+1]='\0';
    return ou;
}

int mString::find (const mString &s){
    int i,k=0,l=0;
    
    while (st[k++]);
    k--;
    while (s.st[l++]);
    l--;
    
    for (i=0; i<k; i++){
        if (st[i]==s.st[0]){
            if (substr(i,l)==s) return i;
        }
    }
    
    return -1;
}

class Tpeep{
    protected:
    mString name, surname, otch, dr;
    int state;
    public:
    
    virtual void print()=0;
    
    virtual void create(mString &na, mString &surn,mString &ot,mString &d){
        name = na;
        surname = surn;
        otch = ot;
        dr = d;
    }
    
    virtual void create(const char* na, const char* surn,const char* ot,const char* d){
        name = na;
        surname = surn;
        otch = ot;
        dr = d;
    }
};

class T_student: public Tpeep {
    protected:
    int marks[5]; // для оценок 
    public:
    T_student(){
        state=0;
        for (int i=0;i<5;i++) marks[i]=0; // заполнение нулями
    }
    void print(){
        cout <<"Студент:"<< endl;
        cout << name << " " << surname << " " << otch << " " << dr << endl;
        cout <<"Оценки:"<< endl;
        for (int i=0;i<5;i++) cout <<" "<<markGet(i);
        cout << endl;
    }
    void tst(){
        cout<<"***";
    }
    void markSet(int i, int vl){marks[i]=vl;}
    int markGet(int i){return marks[i];}
};

class builder0{ // студент 
    public:
    void inputMarks(T_student* person){
        int i, o;
        cout <<"Введите оценки:"<< endl;
        for (i=0;i<5;i++){
            cout<<"["<<i<<"]"; cin>>o; 
            person->markSet(i,o);
        }
    }
};


class T_teacher: public Tpeep {
    protected:
    mString dist[3]; // 3 дисциплины преподавателя
    public:
    T_teacher(){
        state=1;
        for (int i=0;i<3;i++) dist[i]=""; // заполнение пустыми строками
    }
    void print(){
        cout <<"Преподаватель:"<< endl;
        cout << name << " " << surname << " " << otch << " " << dr << endl;
        cout <<"Дисциплины:"<< endl;
        for (int i=0;i<3;i++) cout <<" "<<DistGet(i); // Дисциплины
        cout << endl;
    }
    void tst(){
        cout<<"***";
    }
    void DistSet(int i, mString &vl2){dist[i]=vl2;}
    mString DistGet(int i){return dist[i];}
};

class builder1{ // преподаватель
    public:
    void inputDist(T_teacher* person){
        int j;
        mString o;
        cout <<"Введите дисциплины:"<< endl;
        for (j=0;j<3;j++){
            cout<<"["<<j<<"]"; cin>>o; //mString 
            person->DistSet(j,o);
        }
   }
};    
    
class fabrika{
    public:
    Tpeep* create (const char* na, const char* surn, const char* otch, const char* d, int type){
        mString na1, surn1, otch1, d1;
        na1 = na;
        surn1 = surn;
        otch1 = otch;
        d1 = d;
        return create(na1,surn1,otch1,d1,type);
    }

    Tpeep* create(mString &na, mString &surn, mString &otch, mString &d, int type){
        Tpeep *res = NULL;
        if (type==0){
            res = new T_student;
            res->create(na,surn, otch, d);
        }
        else if (type==1){
            res = new T_teacher;
            res->create(na,surn, otch, d);
        }
        return res;
    }
    
};    


int main()
{
    
    fabrika dekanat; // паттерн
    builder0 uchOtdel;
    builder1 uchOtdel1;

    int k=1, t,i,j;
    mString n,s,o,d;
    mString tmp;
    Tpeep** peeps = new Tpeep*[k];
    cout << "Введите данные (студент или преподаватель):" << endl;
    for (i=0;i<k;i++){
        cout<< "Фамилия: ";cin>>s;
        cout<< "Имя: ";cin>>n;
        cout<< "Отчество: ";cin>>o;
        cout<< "Дата рождения: ";cin>>d;
        cout<< "Статус: ";cin>>t;
        cin>>tmp; //пустышка
        
        peeps[i]=dekanat.create(n,s,o,d,t);
        if (t==0){
            uchOtdel.inputMarks((T_student*)peeps[i]);
        }
        else if (t==1){
            uchOtdel1.inputDist((T_teacher*)peeps[i]);
        }
    }
    for (i=0;i<k;i++){
        peeps[i]->print();
    }
    
    return 0;
}
