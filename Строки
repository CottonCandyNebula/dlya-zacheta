
#include <iostream>

using namespace std;

class mString {
    private:
    char *st;
    public:
    mString(){
        st = NULL;
    }
    
    void test(){
        st = new char(10);
        char c = 'a';
        for (int i=0; i<10; i++) st[i] = c++;
        st[9]='\0';
        cout << st;
    }
    
    ~mString(){
        if (st) delete st;
    }

    mString substr (int start, int count);
    int find (const mString &s);
    mString replace (mString &s1, mString &s2);
    mString replace (mString &s, char *c);
    mString replace (char *c, mString &s);
    mString replace (char *c1, char *c2);
    mString replace_k (mString &s1, mString &s2, int count);
    
    void operator = (const mString &s);
    void operator = (const char *c);
    mString operator + (const mString &s) const;
    mString operator + (const char *s) const;
    friend mString operator + (const char *c, const mString &s);
    
    friend bool operator == (const mString &a, const mString &b);
    friend bool operator > (const mString &a, const mString &b);
    friend bool operator >= (const mString &a, const mString &b);
    friend bool operator < (const mString &a, const mString &b);
    friend bool operator <= (const mString &a, const mString &b);
    
    friend istream& operator >> (istream &in, mString &s);
    friend ostream& operator << (ostream &out, const mString &s);
};

ostream& operator<< (ostream &out, const mString &s){
    out << s.st;
    return out;
}

istream& operator>> (istream &in, mString &s){
    char buf[10000], t;
    int i, k=0;
    t=in.get();
    while ((int)(t)!=10){
        buf[k++]=t;
        t=in.get();
    }
    if (s.st) delete s.st;
    s.st = new char[k+1];
    for (i=0; i<k; i++) s.st[i]=buf[i];
    s.st[i]='\0';
    return in;
}

void mString::operator= (const mString &s){
    if (st) delete st;
    int i, k=0;
    while (s.st[k++]);
    st = new char[k];
    for (i=0; i<k; i++) st[i]=s.st[i];
}

void mString::operator= (const char *c){
    if (st) delete st;
    int i, l=0;
    while (c[l++]);
    st = new char[l];
    for (i=0; i<l; i++) st[i]=c[i];
    st[i]='\0';
}

mString mString::operator+ (const mString &b) const{
    int i, j, k=0, l=0;
    mString ou;
    
    while (st[k++]);
    k--;
    while (b.st[l++]);
    l--;
    if (ou.st) delete ou.st;
    
    ou.st = new char[k+l];
    for (i=0; i<k; i++) ou.st[i]=st[i];
    for (j=k; j<k+l; j++) ou.st[j]=b.st[j-k];
    ou.st[j]='\0';
    
    return ou;
}

mString mString::operator + (const char *s) const{
    int i, j, k=0, l=0;
    mString ou;
    
    while (st[k++]);
    k--;
    while (s[l++]);
    l--;
    if (ou.st) delete ou.st;
    
    ou.st = new char[k+l];
    for (i=0; i<k; i++) ou.st[i]=st[i];
    for (j=k; j<k+l; j++) ou.st[j]=s[j-k];
    ou.st[j]='\0';
    
    return ou;
}

mString operator + (const char *c, const mString &s){
    int i, j, k=0, l=0;
    mString ou;
    
    while (c[k++]);
    k--;
    while (s.st[l++]);
    l--;
    if (ou.st) delete ou.st;
    
    ou.st = new char[k+l];
    for (i=0; i<k; i++) ou.st[i]=c[i];
    for (j=k; j<k+l; j++) ou.st[j]=s.st[j-k];
    ou.st[j]='\0';
    
    return ou;
}

bool operator == (const mString &a, const mString &b){
    int i, j, k=0, l=0;
    
    while (a.st[k++]);
    k--;
    while (b.st[l++]);
    l--;
    if (k!=l) return 0;
    
    int res=0;
    for (i=0; i<k; i++){
    if (a.st[i]!=b.st[i]) { res = 0;}
    else {res = 1;}
    }
    return res;
}

bool operator != (const mString &a, const mString &b){
    return (a!=b);
}

bool operator > (const mString &a, const mString &b){
    int i, j, k=0, l=0;
    
    while (a.st[k++]);
    k--;
    while (b.st[l++]);
    l--;
    int r = k;
    if (l<r) r = l;
    int res;
    for (i=0; i<=r; i++){
        if (a.st[i]>b.st[i]) {res = 1;}
        else {res = 0; }
    }
    return res;
}

bool operator >= (const mString &a, const mString &b){
    int i, j, k=0, l=0;
    
    while (a.st[k++]);
    k--;
    while (b.st[l++]);
    l--;
    int r = k;
    if (l<r) r = l;
    
    int res;
    for (i=0; i<=r; i++){
        if (a.st[i]>=b.st[i]) {res = 1;}
        else {res = 0; }
    }
    return res;
}

bool operator < (const mString &a, const mString &b){
    int i, j, k=0, l=0;
    
    while (a.st[k++]);
    k--;
    while (b.st[l++]);
    l--;
    int r = k;
    if (l<r) r = l;
    
    int res;
    for (i=0; i<=r; i++){
        if (a.st[i]<b.st[i]) {res = 1;}
        else {res = 0; }
    }
    return res;
}

bool operator <= (const mString &a, const mString &b){
    int i, j, k=0, l=0;
    
    while (a.st[k++]);
    k--;
    while (b.st[l++]);
    l--;
    int r = k;
    if (l<r) r = l;
    
    int res;
    for (i=0; i<=r; i++){
        if (a.st[i]<=b.st[i]) {res = 1;}
        else {res = 0; }
    }
    return res;
}

mString mString::substr (int start, int count){
    mString ou;
    int k=start;
    ou.st = new char[count+1];
    for (int i=0; i<count; i++,k++) ou.st[i]=st[k];
    ou.st[count+1]='\0';
    return ou;
}

int mString::find (const mString &s){
    int i,k=0,l=0;
    
    while (st[k++]);
    k--;
    while (s.st[l++]);
    l--;
    int res=-1;
    for (i=0; i<k; i++){
        if (st[i]==s.st[0]){
            if (substr(i,l)==s) res = i;
        }
    }
    
    return res;
}

mString mString::replace (mString &s1, mString &s2){
    mString ou;
    int i=0, l=0, k=0, p=0, index;
    index = find(s1);
    
    while (s1.st[l++]);
    l--;
    while (s2.st[k++]);
    k--;
    while (st[p++]);
    p--;
    
    ou.st = new char[p-l+k];
    
    for (i; i < index; i++) ou.st[i]=st[i];
    for (i; i<k+index; i++) ou.st[i]=s2.st[i-index];
    for (i; i<=(p-l+k); i++) ou.st[i]=st[i-l+index];
    
    return ou;
}

mString mString::replace (mString &s, char *c){
    mString ch;
    int i, l=0;
    
    while (c[l++]);
    ch.st = new char[l];
    
    for (i=0; i<l; i++) ch.st[i]=c[i];
    ch.st[i]='\0';
    
    return replace(s, ch);
}

mString mString::replace (char *c, mString &s){
    mString ch;
    int i, l=0;
    
    while (c[l++]);
    ch.st = new char[l];
    
    for (i=0; i<l; i++) ch.st[i]=c[i];
    ch.st[i]='\0';
    
    return replace(ch, s);
}

mString mString::replace (char *c1, char *c2){
    mString ch1, ch2;
    int i, j, l=0, k=0;
    
    while (c1[l++]);
    ch1.st = new char[l];
    for (i=0; i<l; i++) ch1.st[i]=c1[i];
    ch1.st[i]='\0';
    
    while (c2[k++]);
    ch2.st = new char[k];
    for (j=0; j<k; j++) ch2.st[j]=c2[j];
    ch2.st[j]='\0';
    
    return replace(ch1, ch2);
}

mString mString::replace_k (mString &s1, mString &s2, int count){
    mString ou;
    ou = replace(s1,s2);
    for (int i=1; i<count; i++){
        ou = ou.replace(s1,s2);
    };
    return ou;
}


int main()
{
    
    
    mString s, p, in1, in2;
    int c;
    cout << "Тестовый:" << endl;
    s.test(); //abcdefghi
    cout << endl;
    cout <<"Строка с константой:" << endl;
    p = s + "abc"; // строка со словом/константой 
    cout<< "p = " << p << endl;
    cout<< "s = " << s << endl;
    cout <<"Строка со строкой:" << endl;
    cin>>in1;
    cin>>in2;
    cout<< in1+in2 << endl; // строка со строкой
    
    cout << "Введите две строки" << endl;
    cin>>s;
    cin>>p;
    cout <<"Сравнение длины строк:" << endl;
    bool pr = s==p; // сравнение строк (равно - не равно)
    cout << pr << endl;
    cout <<"Больше ли первая:" << endl;
    cin>>s;
    cin>>p;
    bool nr = s>p; // сравнение строк (какая больше)
    cout << nr << endl;
    cout <<"Больше или равно:" << endl;
    cin>>s;
    cin>>p;
    bool mr = s>=p; // больше или равно
    cout << mr << endl;
    cout <<"Не равно:" << endl;
    cin>>s;
    cin>>p;
    bool ar = s==p; // сравнение строк (равно - не равно)
    cout << ar << endl;
    cout << "Введите подстроку" << " "; cin>>p;
    cout << "Введите строку" << " "; cin >>s;
    cout << "Вхождение: " << p << p.find(s) << endl;
    cout << "Введите строку" << " "; cin>>s;
    cout << "Подстрока: " << s.substr(1, 4) << endl;
    cout << "Введите две строки" << endl;
    cin>>in1;
    cin>>in2;
    cout << "Вхождение строки в подстроку:" << endl;
    cout << in1.find(in2);
    return 0;
}
